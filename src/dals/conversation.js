const Meet = require('../schema/meets');
const Conversation = require('../schema/conversations');
const {
	convertTextToAudio,
	convertAudioToText,
} = require('../utils/textAudioUtil');
const { generateAIResponse, convertTextToAudioV2 } = require('../utils/openai');
const { errorLogger } = require('../utils/logErrors');

const generateFirstMessage = async (user, meetCode) => {
	try {
		const meeting = await Meet.findOne({ meetCode });

		if (!meeting) {
			return {
				error: true,
				message: 'Meeting not found.',
				data: null,
			};
		}

		const conversationText = `Hi ${user.name}. This is Aditya, your recuiter from HeroHire. I can see that you have applied for the role of Software Engineer at our company. How about you start by telling me a little bit about yourself?`;

		const newConversation = await Conversation.create({
			meetId: meeting.id,
			userId: user.id,
			userType: 'bot',
			conversationText,
		});

		if (!newConversation) {
			return {
				error: true,
				message: 'Something went wrong.',
				data: null,
			};
		}

		// convert text to audio
		const conversationAudio = await convertTextToAudioV2(conversationText);

		if (!conversationAudio) {
			throw new Error('No audio generated');
		}

		return {
			error: false,
			message: 'Conversation created successfully.',
			data: {
				conversationId: newConversation.id,
				conversationAudio,
				conversationText,
			},
		};
	} catch (err) {
		errorLogger(err);
		return {
			error: true,
			message: 'Something went wrong.',
			data: null,
		};
	}
};

const generateNextMessage = async (user, meetCode) => {
	try {
		const meeting = await Meet.findOne({ meetCode });

		if (!meeting) {
			return {
				error: true,
				message: 'Meeting not found.',
				data: null,
			};
		}

		// fetch all conversations in ascending order of createdAt
		const conversations = await Conversation.find({
			meetId: meeting.id,
		})
			.sort({ createdAt: 1 })
			.select('userType conversationText');

		// conversations should already have a bot message and a user message. These are the first messages that need to be generated before the next message.
		if (!conversations || conversations.length < 2) {
			throw new Error('Invalid conversation');
		}

		const formatForOpenAi = conversations.map((i) => {
			const role = i.userType === 'bot' ? 'assistant' : 'user';
			const content = i.conversationText;

			return {
				role,
				content,
			};
		});

		let openAiMessage = await generateAIResponse(formatForOpenAi);

		if (!openAiMessage) {
			throw new Error('No response generated by openAI');
		}

		const newConversation = await Conversation.create({
			meetId: meeting.id,
			userId: user.id,
			userType: 'bot',
			conversationText: openAiMessage,
		});

		if (!newConversation) {
			return {
				error: true,
				message: 'Something went wrong.',
				data: null,
			};
		}

		// convert text to audio
		const conversationAudio = await convertTextToAudioV2(openAiMessage);

		if (!conversationAudio) {
			throw new Error('No audio generated');
		}

		return {
			error: false,
			message: 'Conversation created successfully.',
			data: {
				conversationId: newConversation.id,
				conversationAudio,
				conversationText: openAiMessage,
			},
		};
	} catch (err) {
		errorLogger(err);
		return {
			error: true,
			message: 'Something went wrong.',
			data: null,
		};
	}
};

const saveUserConversation = async (user, meetCode, base64Audio) => {
	try {
		const meeting = await Meet.findOne({ meetCode });

		if (!meeting) {
			return {
				error: true,
				message: 'Meeting not found.',
				data: null,
			};
		}

		const audioToText = await convertAudioToText(base64Audio);

		if (!audioToText) {
			throw new Error('No text generated from audio');
		}

		const newConversation = await Conversation.create({
			meetId: meeting.id,
			userId: user.id,
			userType: 'user',
			conversationText: audioToText,
		});

		if (!newConversation) {
			return {
				error: true,
				message: 'Something went wrong.',
				data: null,
			};
		}

		return {
			error: false,
			message: 'Conversation Saved',
			data: null,
		};
	} catch (err) {
		errorLogger(err);
		return {
			error: true,
			message: 'Something went wrong.',
			data: null,
		};
	}
};

module.exports = {
	generateNextMessage,
	generateFirstMessage,
	saveUserConversation,
};
